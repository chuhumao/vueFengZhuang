2019.6.24：
		Math.PI ：是指圆周率；
		在javascript中，两个对象相等，他们	会通过相互引用进行交互，改变其中一个对象，则相对应的对象都会发生改变；
		number 和 new number（）区别，看起来new number 和 number一模一样的，但是 new number内置函数跟number不一样。
		
2019.6.25
		es6的findIndex 直接可以找寻数组的下标；
		用法：const index = this.table.findIndex(item => item.text=== val.text);
		类似于forEach的写法，
		/*splice删除*/
		deleteTextArr (val) {
		  const index = this.table.findIndex(item => item.text=== val.text);
		  变量.splice(index,1);
		  val.bol = false;
		},
		
2019.6.26
		必须字母加数字：^(?=.*[A-Za-z])(?=.*\d)[\s\S]{8,20}$（正则）
		
2019.7.2
		对于 sarah，我们没有使用 new 关键字。当使用 new 时，this 引用我们创建的空对象。当未使用 new 时，this 引用的是全局对象（global object）。
		Event Bubbling（事件冒泡）
		阻止事件冒泡（stopPropagation）
		在捕获（capturing）阶段中，事件从祖先元素向下传播到目标元素。当事件达到目标（target）元素后，冒泡（bubbling）才开始。
		
		除了基本对象（base object），所有对象都有原型。基本对象可以访问一些方法和属性，比如 .toString。这就是为什么你可以使用内置的 JavaScript 方法！所有这些方法在原型上都是可用的。虽然 JavaScript 不能直接在对象上找到这些方法，但 JavaScript 会沿着原型链找到它们，以便于你使用。
		let number = 0
		console.log(number++)
		console.log(++number)
		console.log(number)
当第一次使用number++的时候，则是number后续+1，而在第二次console的时候，触发之前的number后自增，number则在第二次变成了1，而第二次的consol则在number使用前自增，数值则变成 2，第三次的打印则变成了 第二次算法用完，成为最后的值

2019.7.3
		toString()方法:如果变量为数字,那么toSting接受一个参数(该参数为数字).也可不传.不传的情况下,默认转化为字符串.传则将变量转化为参数进制的字
		
2019.7.4
vue 复制：
npm install --save vue-clipboard2
import Vue from 'vue'
import VueClipboard from 'vue-clipboard2'
Vue.use(VueClipboard)

<div class="copyBox">
      sysAppId：<span>{{sysAppIds}}</span>
      <el-button class="ml10" type="text" size="medium"
        v-clipboard:copy="sysAppIds"
        v-clipboard:success="onCopy"
        v-clipboard:error="onError">点击复制</el-button>
</div>

has：判断是否含有某个值
is：判断是否为某个值
reduce：计算元素总和

 *对象：
	hasOwnProperty ： 在对象自身查找属性，而不到原型上查找 （所有对象的键，在底层都是以string类型呈现）
	isPrototypeOf： 判断一个对象是否是某个实例的原型对象
	Person（父函数方法）.call(this) // * 利用call调用Person上的属性方法拷贝一份到Student（另一个子函数方法）
	上面在子构造函数（Student）中利用call调用父构造函数（Person）的方式，叫做借助构造函数继承
	
	SyntaxError：当Javascript语言解析代码时,Javascript引擎发现了不符合语法规范的tokens或token顺序时抛出SyntaxError.
	new SyntaxError([message[, fileName[, lineNumber]]])
	message
        可选的. 可阅读的错误描述信息
    fileName 
        可选的. 包含引发异常的代码的文件名
    lineNumber 
        可选的. 包含引发异常的代码的行号

2019.7.9
	数字反转：123 变成 321 ，负数 -123 变成 -321
	提示：reverse, split, jion
	需要if判断
	
2019.7.10
    解决ie11无法打开vue项目；
    ①npm install --save-dev babel-polyfill
    ② 在main.js中引入 import "babel-polyfill"
    ③ 在build文件夹中webpack.base.conf.js将
    //entry: {
        // app: ‘./src/main.js’
    // },
    替换为
    entry: {
        app: ['babel-polyfill',  './src/main.js']
    },
    在index.html页面中加上meta头：<meta http-equiv="X-UA-Compatible"  content="IE=EDGE" />
    
2019.7.11
    解决Element-Ui菜单组件无法点击一个子菜单，关闭另一个子菜单。
      unique-opened：按照官网上的介绍，属于自动关闭另一个菜单；
      router：自动跳转，相当于使用了router-link一样；
      :default-openeds="数组型变量"：打开某个子菜单，关闭另一个菜单；
      :default-active="$route.path"：获取到当前的菜单路径，显示菜单；
      @open="handOpen"： 点击打开的菜单路径；
      自己写的菜单JSON格式：
      [
        {title: '代理商管理',
          id: 1,
          imgSrc: require('../../assets/Home/AgrentUserDaiFu.png'),
          routerLink: '/agrentManage',
          childrenList: [
            {title: '基本信息', id: 11, routerLink: '/agrentManage/BasicInfo', imgSrc: require('../../assets/Home/AgrentUserInfo.png')},
            {title: '商户列表', id: 12, routerLink: '/agrentManage/MerchantList', imgSrc: require('../../assets/Home/AgrentMerchrant.png')},
            {title: '添加商户', id: 13, routerLink: '/agrentManage/MerchantAdd', imgSrc: require('../../assets/Home/AgrentAddUser.png')},
            {title: '修改密码', id: 14, routerLink: '/agrentManage/EditPassword', imgSrc: require('../../assets/Home/AgrentXiugaimima.png')},
            {title: '修改支付密码', id: 15, routerLink: '/agrentManage/EditPayPassword', imgSrc: require('../../assets/Home/AgrentXiugaizhifumima.png')},
            // {title: '绑定谷歌验证器', id: 16, routerLink: '/agrentManage/BindingGoole'},
            // {title: '纳费', id: 17, routerLink: '/agrentManage/Nafe'},
          ]
        },
     ]
      activeIndex：【】 对应上方的 ：default-openeds= activeIndex；
      methods：
        点击打开的子菜单
        handOpen (key, keyPath) {
          this.activeIndex = [key]
        },
      
2019.7.12
      如果需要更改掉elment-BTN的点击颜色和触摸颜色，需要更改css的hover和focus；
    
 2019.7.15
        如果需要进入严格模式，那么需要加入一行 "use strict";
        场景一：
        <script>  
              "use strict";  
              console.log("这是严格模式。");  
        </script>  
        场景二：
        function ages () {
            'use strict'
            age = 1
            console.log(age);
        }
        ages() 
        对比场景二：
        function notStrict() {  
            return "这是正常模式。";  
        }  
        
        eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码；
        语法：eval(string)；
                  string	必需。要计算的字符串，其中含有要计算的 JavaScript 表达式或要执行的语句。
        
        ?事件：
                onclick 点击
                onblur：失去焦点
                onfocus： 得到焦点
                
                onkeydown：按下键盘
                onkeyup： 松开键盘
                onkepress： 按住键盘
                
                onmousedown： 按下鼠标
                onmouseup：松开鼠标
                onmouseover： 把鼠标放到上面
                ommousemove： 移动鼠标
                onmouseout： 移开鼠标
                
                onload：页面加载
                onchange：改变
                onsubmit：表单提交。
                
    continue：跳出此判断，继续进行下一个迭代操作
    for (let i = 1; i < 5; i++) {
      if (i === 3) continue
      console.log(i)
    }
    输出于：1 2 4
    
    const foo = () => console.log('First')
    const bar = () => setTimeout(() => console.log('Second'))
    const baz = () => console.log('Third')
    bar()，foo()，baz()
    在浏览器中，我们不仅有运行时引擎，还有一个叫做 WebAPI 的东西。WebAPI 提供了 setTimeout 函数，也包含其他的，例如 DOM。
    只要写入setTimeout就会将这里的首先运行，但是会在最后调用；
        1、将 callback 推送到 WebAPI 后，setTimeout 函数本身(但不是回调！)将从栈中弹出。
        2、现在，foo 被调用，打印 "First"。foo 从栈中弹出，baz 被调用. 打印 "Third"。
        3、WebAPI 不能随时向栈内添加内容。相反，它将回调函数推到名为 queue 的地方。
        4、这就是事件循环开始工作的地方。一个事件循环查看栈和任务队列。如果栈是空的，它接受队列上的第一个元素并将其推入栈。
        5、bar 被调用，打印 "Second"，然后它被栈弹出。
    
    let pip = document.getElementById('pip').outerHTML // 不但展示文本，也会将标签展示出来
    console.log(pip);
    let pop = document.getElementById('pop').innerHTML // 展示文本
    console.log(pop);
    // 如果不想这样，可以使用event.stopPropagation；
    // 导致事件的最深嵌套的元素是事件的 target。你可以通过 event.stopPropagation 来停止冒泡。
    
    apply，call ，bind
    在 javascript 中，call 和 apply 都是为了改变某个函数运行时的上下文（context）而存在的，换句话说，就是为了改变函数体内部 this 的指向。
JavaScript 的一大特点是，函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。
    this 是你想指定的上下文，他可以是任何一个 JavaScript 对象(JavaScript 中一切皆对象)，call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里。
    案例：作用域.call(this, arg1, arg2);  作用域.apply(this, [arg1, arg2])
    第一步：定义对象
    function fruits() {} 
    第二步：创建对象方法  
    fruits.prototype = {
        color: "red",
        say: function() {
            console.log("My color is " + this.color);
        }
    }
     第三步：使用对象方法
    var apple = new fruits;
    apple.say();    //My color is red
    第四步：利用 apply 和 call 改变this指向；
    banana = {
        color: "yellow"
    }
    apple.say.call(banana);     //My color is yellow
    apple.say.apply(banana);    //My color is yellow
    
    bind()最简单的用法是创建一个函数，使这个函数不论怎么调用都有同样的this值。
    自己理解的：就是将被改变的this，重新指回你想要的那个this指向，但是bind，并不会像call 立即执行，则会返回一个作用域方法
    this.num = 9; 
    var mymodule = {
      num: 81,
      getNum: function() { 
        console.log(this.num);
      }
    };

    mymodule.getNum(); // 81

    var getNum = mymodule.getNum;
    getNum(); // 9, 因为在这个例子中，"this"指向全局对象

    var boundGetNum = getNum.bind(mymodule);
    boundGetNum(); // 81
    
     falsy 值（6种）：
     undefined，null，NaN，0，单引号 ''  ， (empty string)，false
     truthy 值：
     Function 构造函数, 比如 new Number 和 new Boolean，是 truthy。

    当超过数组长度时：
    const numbers = [1, 2, 3]
    numbers[10] = 11
    console.log(numbers)
    当你为数组设置超过数组长度的值的时候， JavaScript 会创建名为 "empty slots" 的东西。它们的值实际上是 undefined。你会看到以下场景：[1, 2, 3, 7 x empty, 11]
    这取决于你的运行环境（每个浏览器，以及 node 环境，都有可能不同）
    
2019.7.17
    为了避免有多余的变量，我们可以使用 `"use strict"。这能确保当你声明变量时必须赋值。
    
2019.7.19
reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。
    array.reduce(function(total, currentValue, currentIndex, arr), initialValue)
    total	必需。初始值, 或者计算结束后的返回值。
    currentValue	必需。当前元素
    currentIndex	可选。当前元素的索引
    arr	可选。当前元素所属的数组对象。
     *initialValue 可选。传递给函数的初始值

[...‘string’] 扩展运算符，类似于split 分割  【's','t','r','i','n','g'】；

 2019.7.22
 1、在需要创建 .gitignore 文件的文件夹, 右键选择Git Bash 进入命令行，进入项目所在目录。
2、输入 touch .gitignore ，生成“.gitignore”文件。
3、在”.gitignore” 文件里输入你要忽略的文件夹及其文件就可以了。（注意格式）

2019.7.25
            moment：JS计算时间插件；
            this.$refs['addParams'].resetFields(); （清除掉validate的判空）
“Web前端开发之HTML+CSS精英课堂” 
            https://ke.qq.com/course/231570?tuin=31cf0205

            “2019年 HTML+CSS 零基础权威入学宝典”
            https://ke.qq.com/course/414780?taid=3622607346095164&tuin=c27dc8f6
            ?
            淘宝商城项目课:
            https://ke.qq.com/course/347602?tuin=c27dc8f6
            ?
            "Web前端开发之Javascript精英课堂“ 
            https://ke.qq.com/course/231577?tuin=31cf0205
            （以上也是学习前端技术课程的顺序）
            ?
            原生js贪吃蛇实战开发
            https://ke.qq.com/course/276537?tuin=31cf0205
            ?
            原生js扫雷游戏开发
            https://ke.qq.com/course/277224?tuin=31cf0205
            
2019.7.31
        position:sticky，粘性定位要起作用，需要设置最后滞留位置。chrome有bug，firefox完美
        
2019.8.1
        var browser={
            versions:function(){
            var u = window.navigator.userAgent;
            return {
                trident: u.indexOf('Trident') > -1, //IE内核
                presto: u.indexOf('Presto') > -1, //opera内核
                webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核
                gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核
                mobile: !!u.match(/AppleWebKit.*Mobile.*/)||!!u.match(/AppleWebKit/), //是否为移动终端
                ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端
                android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或者uc浏览器
                iPhone: u.indexOf('iPhone') > -1 || u.indexOf('Mac') > -1, //是否为iPhone或者安卓QQ浏览器
                iPad: u.indexOf('iPad') > -1, //是否为iPad
                webApp: u.indexOf('Safari') == -1 ,//是否为web应用程序，没有头部与底部
                weixin: u.indexOf('MicroMessenger') == -1 //是否为微信浏览器
                };
            }()
        }
        document.writeln(" 是否为移动终端: "+browser.versions.mobile);
        document.writeln(" ios终端: "+browser.versions.ios);
        document.writeln(" android终端: "+browser.versions.android);
        document.writeln(" 是否为iPhone: "+browser.versions.iPhone);
        document.writeln(" 是否iPad: "+browser.versions.iPad);
        document.writeln(navigator.userAgent);
        
2019.8.5
instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。
但是 instanceof是判断前面的对象 是否是后面类（对象）的实力，它不代表继承；
     demo：(Super instanceof SubClass) false；
如果怕忘记对象实例化的话，那么就在方法作为一个实例监控
let Book = function (title,time,type) {
    if(this instanceof Book) {
        this.title = title;
        this.time = time;
        this.type = type;
    } else {
        return new Bookl(title, time, type);
    }
}
就可以直接去使用：var book = Book(1 , 2 ,3);

常见的类继承：
    //  声明父类
    function Super() { 
        this.superValue = true;
    }
    //  为父类添加共有方法
    Super.prototype.getSuperValue = function ( )  {
        return this.superValue;
    }
    // 声明子类
    function SubClass( ) {
        this.subValue = false;
    }
 从这一步，现在开始继承
    //  继承父类
    SubClass.prototype = new  Super() ;
    // 为子类添加共有方法
    SubClass.prototype.getSuperValue = function ( )  {
        return this.subValue;
    }
        
        21页

2019.8.6
链接：https://pan.baidu.com/s/1GUj9c24JXXmJuuhmryV-tg 
提取码：3mzr 
复制这段内容后打开百度网盘手机App，操作更方便哦
这是2018版本的pr

2019.8.7
            取消validate验证
            this.$refs['form'].resetFields();
            validate的判断，都是必须string，如果是number是无法判断；
2019.8.12
	    tables：是表格里面的 <Table border stripe ref="tables" >
            this.$refs.tables.selectAll(false);

2019.8.13
	vue中使用富文本：vuequilleditor和vue2editor
	https://www.sojson.com/jquery/down.html（JQ下载地址）
2019.8.15
	isNaN用来判断 paseInt和paseFolat是否调用转换成功。（自己尝试：true为string; false为number）
2019.8.19
	fill：是给数组增加填充物，如果数组无值，或者需要什么，则可以 
	let a = new Array(3);
	console.log(a.fill('*'));
	["*", "*", "*"]

2019.8.20
	九型人格：完美型，全爱型，成就型，艺术型，智能型，忠诚型，活跃型，领袖型，和平型；
2019.8.22
	保留六位小数点（正则）：/^(?!0+(?:\.0+)?$)(?:[1-9]\d*|0)(?:\.\d{0,6})?$/
2019.8.16
	如果是像点击单个li中的img，需要更改class的话，
	可以根据 v-for=(item,index) in list :key="index" ,:class="变量=index？‘action’:'' 这样来进行判断，
而且点击的时候，将index传到方法里面，进行变量接收

2019.9.12 
moment的用法转换为2019-09-12 00:00:00
moment(this.params.endTime).format('YYYY-MM-DD HH:mm:ss')

2019.9.18
Vue v-model 动态绑定（数组变量：dataList），（打印直接打印：dataList）
<li v-for="(item, key) in dataList">
  <input type="text"  v-model="item.input_text">
</li>

2019.10.10
如果需要进行深度拷贝，则需要在写公用方法的时候，进行 数组 和 对象的判断。
var copy = Array.isArray(obj) ? [] : {};  判断是否是数组！

if ( cache === void 0 ) cache = [];
使用void(0)是用来代替undefined，因为undefind不是JS的保留字。

2019.10.17
Resolution Test
根据原页面，复制原页面 新建一个不同分辨率的网页。

2019.10.18
购买服务器地址：https://my.vultr.com/；
函数方法里面的参数：

    function age(x,y) {
        // let x = 1
        // const y = 2
        var x = 1
        console.log(x);
        console.log(y);
    }
    age(3,4)
如果使用let 与 const 则无法将参数重新定义，会报错（使用参数默认值时，函数不能有同名参数。）；
而var可以；

2019.10.21
/* 昔归 */
柴门闻犬吠，风雪夜归人；
/* 远方 */
醉后不知天在水，满船清梦压星河；
南朝四百八十寺，多少楼台烟雨中；
小楼一夜听春雨，深巷明朝卖杏花；

/* 乡愁 */
剪不断，理还乱，是离愁，别是一番滋味在心头。

/* 明悟 */
少年不识愁滋味，爱上层楼，爱上层楼。为赋新词强说愁。而今识尽愁滋味，欲说还休，欲说还休。却道天凉好个秋。
少年听雨歌楼上，红烛昏罗帐。壮年听雨客舟中，江阔云低，断雁叫西风。而今听雨僧庐下，鬓已星星也。悲欢离合总无情，一任阶前，点滴到天明。

2019.10.23
页面导入样式时，使用link和@import有什么区别？
区别：
1.link是HTML标签，@import是css提供的。
2.link引入的样式页面加载时同时加载，@import引入的样式需等页面加载完成后再加载。
3.link没有兼容性问题，@import不兼容ie5以下。
4.link可以通过js操作DOM动态引入样式表改变样式，而@import不可以。

---
vue开发调试神器vue-devtools使用详解


2019.10.28
setTimeout 是等主线流程执行完毕之后，栈有空余时间，才会去加载setTimeout

2019.10.30
elenement时间组件

                        <el-date-picker
                                class="selectDate" // class函数
                                v-model="date2"
                                @change="formate2" // 点击时，更换新时间函数
                                type="datetime"
                                placeholder="选择开始日期时间"
                                default-time="23:59:59"  // 设置为默认值
                                value-format="yyyy-MM-dd HH:mm:ss" // 时间格式
			>
                        </el-date-picker>
在设置value-format格式时，再次选取的时间函数则变成设置的格式，不再是最初始的未转化的格式

2019.10.31
如果要进行vue兄弟间传值，需要创建一个公用js文件，
1.建立公共文件，并引入  公用  bus

新建Bus.js文件。只需两句代码。
1 import Vue from 'vue'
2 export default new Vue;
然后在需要传递消息的两个组件引入   import Bus from '@/components/utils/Bus.js';
3.接受消息
接受组件的事件： 使用 $on 接受
写在钩子函数内：例如：mounted   created都可以
1 Bus.$on('msg', (e) => {
2   this.examineNum = e;
3 })


2019.11.12
如果要进行input只读，不允许输入值的时候，利用只读功能；
<el-input type="text" :readonly="true Or false"></el-input>

2019.11.25
async await 学习，了解
// 实现element表格多选变成单选
this.$refs.multipleTable.toggleRowSelection(this.onceTable[0])

2019.12.9
前端查看PDF东西，由<embed :src="embedOnce" width="100%" height="600px"/>；src为后端接口，直接调用，不用理会
返回值来进行src赋值。

2019.12.11
tortoiseGit 小乌龟git提交器

2019.12.13
.native事件修饰符，若是不使用此修饰符，则无法监听到el-input事件。
<el-input v-model="scope.row.contentCount" style="width: 40px;" @keydown.native="keyCount(scope.row)" maxLength="3"></el-input>

2019.12.16
element-table
表格默认选中
      this.$refs.multipleTable.toggleRowSelection() 括号里面填写某个值，或者循环将数组中的对象，放进去
表格取消勾选
      this.$refs.multipleTable.clearSelection()

2019.12.18
      this.tableDataDialogAJ5.forEach((item) => {
        item.caseNoTwo = this.editCaseNo
      })
      this.tableDataDialogAJ5 = JSON.parse(JSON.stringify(this.tableDataDialogAJ5))
在forEach里面循环更新了数据，但是在视图层未更新，则需要将以更新的数组，进行重新赋值。

2019.12.30
尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚。就是指某个函数的最后一步是调用另一个函数。

for..in 和 for..of的区别
for.in循环出来的内容是数组中的下标；
而for.of循环出来的内容是数组中的value；

var, let, const的区别
var可以在全局使用，
let是块级区部使用，
const是唯一性，

let也可以说是唯一性的，在同一个块级情况下，let不允许出现同一个变量

2020.1.6 展示PDF
若是使用第一种：则需要在标签内添加（type="application/pdf"）
          <embed :src="embedOnce" type="application/pdf" width="100%" height="600px"/>
若是使用第二种：则可以直接显示（目前未发现有问题）
          <!--<iframe :src="embedOnce" width="100%" height="600px"></iframe>-->